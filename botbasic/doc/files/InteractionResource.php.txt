<?php
/**
 * Recursos asociados a cada interacción entre sistema y usuario
 *
 * @author      Gorka G LLona                               <gorka@gmail.com> <gorka@venicua.com>
 * @license     http://www.venicua.com/botbasic/license     Licencia de BotBasic
 * @see         http://www.venicua.com/botbasic             Referencia de BotBasic
 * @version     1.0 - 01.jan.2017
 * @since       0.1 - 01.jul.2016
 */



namespace botbasic;



/**
 * Clase ChatMediumCliStub
 *
 * Subclase de ChatMedium que implementa la comunicación con la herramienta CLI de simulación de interacciones.
 *
 * @package botbasic
 */
class InteractionResource
{



    /** Tipo de recurso: usado por DBbroker para señalizar Splashes que son "clones" de un Interaction cuando se utilizan túneles de BotBasic;
     *  la clonación de recursos evita la duplicación de los archivos que reflejan sus contenidos, y permite reutilizar el file_id de Telegram */
    const TYPE_CLONED   = 100;

    /** Tipo de recurso: texto; no usado actualmente para recursos (pues los textos van en Interaction) pero sí para la lógica que implementa túneles */
    const TYPE_TEXT     = 101;

    /** Tipo de recurso: imagen; en Telegram se descargará siempre la imagen que tenga la máxima resolución */
    const TYPE_IMAGE    = 102;

    /** Tipo de recurso: clip de audio */
    const TYPE_AUDIO    = 103;

    /** Tipo de recurso: clip de voz */
    const TYPE_VOICE    = 104;

    /** Tipo de recurso: clip de video */
    const TYPE_VIDEO    = 105;

    /** Tipo de recurso: documento */
    const TYPE_DOCUMENT = 106;

    /** Tipo de recurso: geolocalización; no se guarda como archivo descargado sino en $content */
    const TYPE_LOCATION = 107;

    /** Tipo de recurso: caption (asociado a algunos updates que vienen de la chatapp); se almacena junto con el recurso pero no se usa en BotBasic */
    const TYPE_CAPTION  = 108;

    /** @var int ID del recurso, tal como aparece en la BD */
    public $id            = -1;

    /** @var int Tipo del recurso (TYPE_...) */
    public $type          = null;

    /** @var null InteractionResource original; aplica sólo a generados por clonación */
    public $clonedFrom    = null;

    /** @var int Tipo ($type) del ChatMedium del que proviene el recurso; se refleja en BD a efectos de business intelligence */
    public $cmType        = null;

    /** @var mixed Información de autenticación necesaria para descargar el contenido del recurso desde los servidores de la chatapp */
    public $cmcAuthInfo   = null;

    /** @var mixed ID del recurso, necesario para descargar el contenido desde los servidores de la chatapp */
    public $fileId        = null;

    /** @var string|null Nombre del archivo local que refleja el recurso después de que ha sido descargado, o null cuando aún no lo ha sido */
    public $filename      = null;

    /** @var null|mixed En recursos que no ameritan un archivo para su contenido (como geolocalizaciones), el contenido se almacena aquí */
    public $content       = null;

    /** @var string Estado de la descarga del archivo del contenido, según campo ENUM de la BD */
    public $downloadState = null;

    /** @var array Nombres de los tipos de recursos */
    static $typeStrings = [
        self::TYPE_TEXT     => "text",
        self::TYPE_IMAGE    => "image",
        self::TYPE_AUDIO    => "audio",
        self::TYPE_VOICE    => "voice",
        self::TYPE_VIDEO    => "video",
        self::TYPE_DOCUMENT => "document",
        self::TYPE_CAPTION  => "caption",
        self::TYPE_LOCATION => "location",
    ];



    static public function isValidType ($type)
    {
        return in_array($type, self::$typeStrings);
    }

    static public function typeString ($type)
    {
        return self::isValidType($type) ? self::$typeStrings[$type] : "unknown";
    }

    private function __construct ($type)
    {
        $this->type = $type;
    }

    static public function createFromFileId ($type, $cmAuthInfo, $fileId, $doDownload = BOTBASIC_DOWNLOAD_MMCONTENT)
    {
        $r = new InteractionResource($type);
        $r->cmcAuthInfo = $cmAuthInfo;
        $r->fileId      = $fileId;
        $res = self::writeToDB($doDownload);
        if ($res === null) {
            // TODO Log this
            return null;
        }
        return $r;
    }

    static public function createFromFile ($type, $filename)
    {
        $r = new InteractionResource($type);
        $dbFilename = DBbroker::storeFile($filename);
        if ($dbFilename === null) {
            // TODO Log this
            return null;
        }
        $r->filename = $dbFilename;
        $res = self::writeToDB(BOTBASIC_DOWNLOAD_MMCONTENT);
        if ($res === null) {
            // TODO Log this
            return null;
        }
        return $r;
    }

    public function createByCloning ()
    {
        $clone = clone $this;
        $clone->clonedFrom = $this;
        return $clone;
    }

    static public function readFromDB ($id)
    {
        $data = DBbroker::readResource($id);
        if ($data === null)  {
            // TODO Log this
            return null;
        }
        elseif ($data === false) {
            // TODO Log this (ID not found)
            return null;
        }
        list ($type, $cmType, $cmAuthInfo, $fileId, $filename, $content, $downloadState) = $data;
        $r = new InteractionResource($type);
        $r->id            = $id;
        $r->cmType        = $cmType;
        $r->cmcAuthInfo   = $cmAuthInfo;
        $r->fileId        = $fileId;
        $r->filename      = $filename;
        $r->content       = $content;
        $r->downloadState = $downloadState;
        return $r;
    }

    /**
     * @param $doDownload   bool
     * @return bool|null
     */
    public function writeToDB ($doDownload)
    {
        $res = DBbroker::writeResource($this, $doDownload);
        if ($res === null) {
            // TODO Log this
            return null;
        }
        elseif ($res === false) {
            // TODO Log this: current non-(NULL|-1) ID not found in DB
            return null;
        }
        elseif ($res === true) {}   // update done; else insert done
        else                   { $this->id = $res; }
        return true;
    }

    public function serializeBrief ()
    {
        $f = function ($arg) { return $arg === null ? 'NULL' : $arg; };
        $res = '[ID=' . $f($this->id) . '|TYPE=' . InteractionResource::typeString($this->type) . '|CMTYPE=' . $f($this->cmType) .
               '|FILEID=' . $f($this->fileId) . '|STATE=' . $this->downloadState . ']';
        return $res;
    }

}

