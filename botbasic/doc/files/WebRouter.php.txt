<?php
/**
 * Enrutador de la entrada del web service implementado para recibir los updates desde las chatapps hacia el resto del runtime de BotBasic
 *
 * @author      Gorka G LLona                               <gorka@gmail.com> <gorka@venicua.com>
 * @license     http://www.venicua.com/botbasic/license     Licencia de BotBasic
 * @see         http://www.venicua.com/botbasic             Referencia de BotBasic
 * @version     1.0 - 01.jan.2017
 * @since       0.1 - 01.jul.2016
 */



namespace botbasic;



/**
 * Clase WebRouter
 *
 * Superclase que desde su método run() transfiere al método run() de una subclase de ChatMedium el control del procesamiento del Update
 * recibido desde una chatapp.
 *
 * @package botbasic
 */
abstract class WebRouter
{



    /** @var string Nombre completo del script PHP por el cual se crea el WebRouter, el cual permite identificar el ChatMedium y el bot de BotBasic */
    private $scriptName = null;



    public function __construct ($scriptName)
    {
        $this->scriptName = $scriptName;
    }

    abstract protected function getThisChatMedium();

    final public function run ()
    {
        $update   = $this->getUpdate();
        $cm       = ChatMedium::create($this->getThisChatMedium());
        $authInfo = $cm->getAuthInfoForDownloadsByScriptName($this->scriptName);
        if ($authInfo === null) { return null; }
        $genericUpdate = $cm->undressUpdate($update, $authInfo);
        if ($genericUpdate->hasValidSequence()) {
            $cm->run($this->scriptName, $genericUpdate);
        }
        else {
            // TODO log
        }
        return true;
    }

    abstract protected function getUpdate ();

    protected function getWebContent ()
    {
        $maxReadSize = 20000000;   // TODO tune this (now 20 MB)
        $is = $this->inputStream();
        $content = fread($is, $maxReadSize);
        return $content;
    }

    private function inputStream ()
    {
        // http://stackoverflow.com/questions/8945879/how-to-get-body-of-a-post-in-php
        // php://temp allows you to manage memory consumption because it will transparently switch to filesystem storage after a certain amount of data is stored (2M by default). This size can be manipulated in the php.ini file or by appending /maxmemory:NN, where NN is the maximum amount of data to keep in memory before using a temporary file, in bytes.
        ini_set('always_populate_raw_post_data', 'On');   // TODO move
        $rawInput  = fopen('php://input', 'r');
        $tmpStream = fopen('php://temp', 'r+');
        stream_copy_to_stream($rawInput, $tmpStream);
        rewind($tmpStream);
        return $tmpStream;
    }

}

