<?php
/**
 * Objeto intermedio asociado a un medio de chat y a un canal de BotBasic
 *
 * @author      Gorka G LLona                               <gorka@gmail.com> <gorka@venicua.com>
 * @license     http://www.venicua.com/botbasic/license     Licencia de BotBasic
 * @see         http://www.venicua.com/botbasic             Referencia de BotBasic
 * @version     1.0 - 01.jan.2017
 * @since       0.1 - 01.jul.2016
 */



namespace botbasic;



/**
 * Clase ChatMediumChannel
 *
 * Representa una "identidad definida" para la interacción entre BotBasic y una chatapp. La identidad deviene de un triplete compuesto por
 * el tipo de la chatapp, el ID del usuario de la chatapp y el nombre del bot de la chatapp que se usa para las interacciones.
 *
 * @package botbasic
 */
class ChatMediumChannel implements Closable
{



    // in-DB attributes

    /** @var null|int ID del ChatMediumChannel, según como está en la BD */
    private $id          = null;

    /** @var int Uno de los tres componentes del triplete de identidad del ChatMediumChannel: $type del ChatMedium correspondiente */
    private $cmType      = null;

    /** @var string Uno de los tres componentes del triplete de identidad del ChatMediumChannel: ID de usuario tal como es entregado por la chatapp */
    private $cmUserId    = null;

    /** @var string Uno de los tres componentes del triplete de identidad del ChatMediumChannel: nombre del bot de la chatapp */
    private $cmBotName   = null;

    /** @var mixed Información adicional que provee el ChatMedium con cada interacción y que es necesaria para autenticar las respuestas dirigidas hacia él */
    private $cmChatInfo  = null;   // inmutable

    /** @var int Código del bot de BotBasic tal como aparece como clave en ChatMediumXXX::$cmBots y en ChatMedium::$bbBots */
    private $bbCodeId    = null;

    /** @var ChatMedium Instancia del ChatMedium asociado */
    private $cm          = null;

    /** @var BotBasicChannel Instancia del BotBasicChannel asociado */
    private $bbc         = null;

    /** @var Splash[] Cola de Splashes que deben se renderizados hacia las chatapps al final del proceso de corrida del runtime */
    private $splashQueue = [];

    /** @var ChatMediumChannel[] Store para todas las instancias de esta clase */
    static private $store = [];



    public function getId          () { return $this->id;         }
    public function getCMtype      () { return $this->cmType;     }
    public function getCMuserId    () { return $this->cmUserId;   }
    public function getCMbotName   () { return $this->cmBotName;  }
    public function getCMchatInfo  () { return $this->cmChatInfo; }
    public function getBBchannel   () { return $this->bbc;        }
    public function getBBcodeId    () { return $this->bbCodeId;   }

    public function getBBcodename ()                { return ChatMedium::getBBcodename($this->bbCodeId);                       }
    public function getBBlastestCodeMajorVersion () { return ChatMedium::getBBlastestAllowedCodeMajorVersion($this->bbCodeId); }
    public function getBBbotname ()                 { return ChatMedium::getBBbotName($this->bbCodeId);                        }

    public function setBBchannel ($bbChannel) { $this->bbc = $bbChannel; }

    public function isAdefaultCMchannel ()
    {
        foreach (ChatMedium::getDefaultCMbots() as $pair) { if ($pair[1] == $this->cmBotName) { return true; } }
        return false;
    }

    private function __construct ($id, $cmType, $cmUserId, $cmBotName, $cmChatInfo, $chatMedium, $bbChannel, $bbCodeId)
    {
        $this->id         = $id;
        $this->cmType     = $cmType;
        $this->cmUserId   = $cmUserId;
        $this->cmBotName  = $cmBotName;
        $this->cmChatInfo = $cmChatInfo;
        $this->cm         = $chatMedium;
        $this->bbc        = $bbChannel;
        $this->bbCodeId   = $bbCodeId;
        self::$store[] = $this;
    }

    static public function makeFromCM ($cmType, $cmUserId, $cmBotName, $cmChatInfo, $chatMedium, $bbCodeId)
    {
        // get ID from the passed args
        $id = DBbroker::readChatMediumChannelId($cmType, $cmUserId, $cmBotName);
        if ($id === null) {
            // TODO Log this
            return null;
        }
        if ($id === false) { $id = null; }
        // create the object
        $cmc = new ChatMediumChannel($id, $cmType, $cmUserId, $cmBotName, $cmChatInfo, $chatMedium, null, $bbCodeId);
        // if ID is null, this is a new session from a new triplet
        if ($id === null) {
            $bbc = BotBasicChannel::createFromCMC($bbCodeId, $cmc);
            if ($bbc === null) { return null; }   // TODO Log this
            $cmc->bbc = $bbc;
            $id = DBbroker::writeChatMediumChannel($cmc);   // because id is null, then dbbroker will do an insert and return the id
            if ($id === null) { return null; }    // TODO Log this
            $cmc->id = $id;
        }
        // else ID was read from DB, it means the user was here before with the same chatmedium and in the same bbchannel
        else {
            $data = DBbroker::readChatMediumChannel($id);
            if ($data === null) {
                // TODO Log this
                return null;
            }
            list (, , , , $bbcId) = $data;
            $bbc = BotBasicChannel::load($bbcId);
            if ($bbc === null) { return null; }   // TODO Log this
            $cmc->bbc = $bbc;
        }
        // ready
        return $cmc;
    }

    /**
     * @param  int              $cmType
     * @param  int              $cmUserId
     * @param  string           $cmBotName
     * @param  BotBasicChannel  $bbChannel
     * @param  bool             $onlyQueryStore
     * @return                  ChatMediumChannel|null
     */
    static public function makeFromBBC ($cmType, $cmUserId, $cmBotName, $bbChannel, $onlyQueryStore = false)
    {
        // try to get from the store
        foreach (self::$store as $cmc) {
            if ($cmc->cmType == $cmType && $cmc->cmUserId == $cmUserId && $cmc->cmBotName == $cmBotName) { return $cmc; }
        }
        if ($onlyQueryStore) { return null; }
        // get ID from the passed args
        $id = DBbroker::readChatMediumChannelId($cmType, $cmUserId, $cmBotName);
        if ($id === null) {
            // TODO Log this
            return null;
        }
        if ($id === false) { $id = null; }
        // create the objects
        $cm  = ChatMedium::create($cmType);
        $cmc = new ChatMediumChannel($id, $cmType, $cmUserId, $cmBotName, null, $cm, $bbChannel, $bbChannel->getBBcodeId());
        // if ID is false, this is a new session from a new triplet; write in DB
        if ($id === null) {
            $id = DBbroker::writeChatMediumChannel($cmc);   // because id is null, then dbbroker will do an insert and return the id
            if ($id === null) { return null; }    // TODO Log this
            $cmc->id = $id;
        }
        // ready
        return $cmc;
    }

    /**
     * @param  $id
     * @param  $bbChannel               BotBasicChannel
     * @return ChatMediumChannel|null
     */
    static public function load ($id, $bbChannel = null)   // pass $bbc to avoid BBC loading but assignment
    {
        // try to get from the store
        foreach (self::$store as $cmc) {
            if ($cmc->id == $id) { return $cmc; }
        }
        // if not, read from DB
        $data = DBbroker::readChatMediumChannel($id);
        if ($data === null) { return null; }   // TODO Log this
        list ($cmType, $cmUserId, $cmBotName, $cmChatInfo, $bbcId) = $data;
        // if BBC was not passed, load it
        if ($bbChannel === null) {
            $bbChannel = BotBasicChannel::load($bbcId);
            if ($bbChannel === null) { return null; }   // TODO log
        }
        // create the objects
        $cm = ChatMedium::create($cmType);
        if ($cm === null) { return null; }   // TODO Log this
        $cmc = new ChatMediumChannel($id, $cmType, $cmUserId, $cmBotName, $cmChatInfo, $cm, $bbChannel, $bbChannel->getBBcodeId());
        // ready
        return $cmc;
    }

    static public function getFromStoreByBBchannelId ($bbChannelId)
    {
        foreach (self::$store as $cmc) {
            if ($cmc->bbc->getId() == $bbChannelId) { return $cmc; }
        }
        return null;
    }

    public function orderExecution ($update)
    {
        return $this->bbc->orderExecution($update);
    }

    public function setLocale ($locale)
    {
        $this->cm->setLocale($locale);
    }

    /**
     * @param $splash   Splash
     */
    public function enqueue ($splash)
    {
        $splash->writeToDB();
        $this->splashQueue[] = $splash;
    }

    public function render ()
    {
        $this->cm->render($this->splashQueue, $this);
    }

    public function updatedChatMediaChannelBotName ($anOldCMbotName)
    {
        $idx = null;
        foreach (ChatMedium::allChatMediaTypes() as $type) {
            $classname = "ChatMedium" . ChatMedium::typeString($type);   /** @var ChatMedium $classname */
            $idx = $classname::getCMbotSpecialIndex($anOldCMbotName);
            if ($idx !== null) { break; }
        }
        if ($idx === null) { return null; }
        return $this->cm->getCMbotNameBySpecialIndex($idx);
    }

    public function getLeastUsedCMchannelBotName ($baseChatMediaType, $regExpPattern)
    {
        $allBotNames    = ChatMedium::getCMbotNames($baseChatMediaType, $regExpPattern);
        $usedCMbotNames = DBbroker::readUsedCMchannelBotNames($baseChatMediaType, $this->cmUserId, $allBotNames);
        if ($usedCMbotNames === null) {
            return null;   // TODO Log this
        }
        $choosen = null;
        foreach ($allBotNames as $cmBotName) {
            if (in_array($cmBotName, $usedCMbotNames)) { continue; }
            $choosen = $cmBotName;
            break;
        }
        if ($choosen === null) { $choosen = count($usedCMbotNames) == 0 ? null : $usedCMbotNames[0]; }
        return $choosen;
    }

    public function getMostUsedCMchannelBotName ($baseChatMediaType, $regExpPattern)
    {
        $except = $this->cmBotName;
        $cmBotName = DBbroker::readMostUsedChatMediaBotName($baseChatMediaType, $this->cmUserId, $except);
        if ($cmBotName === null) {
            return null;   // TODO Log this
        }
        elseif ($cmBotName === false) {
            $botNames = ChatMedium::getCMbotNames($baseChatMediaType, $regExpPattern);
            if (count($botNames) === 0) { return null; }
            return $botNames[0];
        }
        else {
            return $cmBotName;
        }
    }

    public function save ()
    {
        if (! ($this->tainting() || $this->id === null)) { return true; }
        $res = DBbroker::writeChatMediumChannel($this);
        if ($res === null) { return null; }   // TODO log this
        $this->tainting(false);
        return true;
    }

    public function close ()
    {
        $this->save();
    }

    public function tainting ($state = null)
    {
        static $theState = false;
        if ($state === null)   { return $theState; }
        if (! is_bool($state)) { return null; }
        $theState = $state;
        return null;
    }

}

